<?xml version="1.0"?>

<project name="clichart" basedir="." default="package">

    <!-- Allow local override of properties -->
    <property file="build.properties" />

    <!--
        NOTE: Ensure that this version number is correct!
    -->
    <property name="clichart-version" value="0.5.9" />

    <!--
        NOTE: Will likely need to override this in your build.properties
    -->
    <property name="cobertura.dir" value="/opt/java/cobertura-1.9" />


    <property name="test.directory" value="src/test/java" />
    <property name="src.directory" value="src/main/java" />


    <!--
        Output directories
    -->

    <property name="output-dir" value="target/java" />
    <property name="output-dir.classes" value="${output-dir}/classes" />
    <property name="output-dir.coverage-classes" value="${output-dir}/coverage-classes" />
    <property name="output-dir.test-classes" value="${output-dir}/test-classes" />
    <property name="output-dir.test-results" value="${output-dir}/test-results" />
    <property name="output-dir.jar" value="${output-dir}/jar" />
    <property name="output-dir.dist" value="${output-dir}/dist" />
    <property name="output-dir.javadoc" value="${output-dir}/javadoc" />
    <property name="output-dir.coverage-report" value="${output-dir}/coverage-report" />

    <property name="output.jarname" value="clichart-${clichart-version}.jar" />
    <property name="manifest.file" value="resource/jar/MANIFEST.MF" />
    <property name="javadoc.overview" value="src/main/java/overview.html" />

    <property name="cobertura.filename" value="${output-dir}/cobertura.ser" />


    <!--
        Classpath setup etc.
    -->
    <property name="library-dir" value="resource/lib" />
    <property name="library.jfreechart" value="${library-dir}/jfreechart-1.0.5.jar" />
    <property name="library.jcommon" value="${library-dir}/jcommon-1.0.9.jar" />
    <property name="library.javacsv" value="${library-dir}/javacsv-2.0-java1.4.jar" />
    <property name="library.commons-cli" value="${library-dir}/commons-cli-1.0.jar" />
    <property name="library.junit" value="${library-dir}/junit-4.1.jar" />
    <property name="library.easymock" value="${library-dir}/easymock-1.1.jar" />

    <path id="compile-classpath">
        <pathelement location="${library.jfreechart}"/>
        <pathelement location="${library.jcommon}"/>
        <pathelement location="${library.javacsv}"/>
        <pathelement location="${library.commons-cli}"/>
    </path>

    <path id="test-compile-classpath">
        <path refid="compile-classpath"/>
        <pathelement location="${output-dir.classes}"/>
        <pathelement location="${library.junit}"/>
        <pathelement location="${library.easymock}"/>
    </path>

    <path id="test-run-classpath">
        <path refid="test-compile-classpath"/>
        <pathelement location="${output-dir.test-classes}"/>
    </path>

    <path id="cobertura.classpath">
        <fileset dir="${cobertura.dir}">
            <include name="cobertura.jar" />
            <include name="lib/**/*.jar" />
        </fileset>
    </path>

    <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />



    <!--
        Targets
    -->
    <target name="compile">
        <mkdir dir="${output-dir.classes}" />
        <javac srcdir="${src.directory}" destdir="${output-dir.classes}" debug="true" source="1.5" target="1.5"
            classpathref="compile-classpath" includeantruntime="false" />
    </target>

    <target name="compile-tests" depends="compile">
        <mkdir dir="${output-dir.test-classes}" />
        <javac srcdir="${test.directory}" destdir="${output-dir.test-classes}" debug="true" source="1.5" target="1.5"
            classpathref="test-compile-classpath" includeantruntime="false" />
    </target>

    <target name="run-tests" depends="compile-tests" unless="no-tests">
        <mkdir dir="${output-dir.test-results}" />
        <junit haltonerror="true" fork="true" forkmode="once">
            <classpath>
                <!-- Set coverage classes first (if present) -->
                <pathelement location="${output-dir.coverage-classes}"/>
                <path refid="test-run-classpath"/>
                <path refid="cobertura.classpath"/>
            </classpath>

            <formatter type="plain"/>

            <sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.filename}" />

            <batchtest todir="${output-dir.test-results}">
                <fileset dir="${test.directory}">
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="javadoc" depends="compile">
        <mkdir dir="${output-dir.javadoc}" />
        <javadoc destdir="${output-dir.javadoc}" sourcepath="${src.directory}" packagenames="*"
                 classpathref="test-compile-classpath" overview="${javadoc.overview}"/>
    </target>

    <target name="jar" depends="run-tests">
        <mkdir dir="${output-dir.jar}" />
        <jar basedir="${output-dir.classes}" destfile="${output-dir.jar}/${output.jarname}" includes="**/*.class"
            manifest="${manifest.file}" />
    </target>

    <target name="package" depends="jar">
        <mkdir dir="${output-dir.dist}" />
        <copy file="${output-dir.jar}/${output.jarname}" todir="${output-dir.dist}"/>

        <property name="output-dir.dist.lib" value="${output-dir.dist}/lib" />
        <mkdir dir="${output-dir.dist.lib}" />
        <copy file="${library.jfreechart}" todir="${output-dir.dist.lib}"/>
        <copy file="${library.jcommon}" todir="${output-dir.dist.lib}"/>
        <copy file="${library.javacsv}" todir="${output-dir.dist.lib}"/>
        <copy file="${library.commons-cli}" todir="${output-dir.dist.lib}"/>
    </target>

    <target name="clean" >
        <delete dir="${output-dir}" />
    </target>

    <!--
        Targets for using cobertura.
    -->
    <target name="compile-for-coverage" depends="compile">
        <mkdir dir="${output-dir.coverage-classes}" />
        <cobertura-instrument todir="${output-dir.coverage-classes}" datafile="${cobertura.filename}">
            <fileset dir="${output-dir.classes}">
                <include name="**/*.class"/>
            </fileset>
        </cobertura-instrument>
    </target>

    <target name="coverage-report">
        <mkdir dir="${output-dir.coverage-report}" />
        <cobertura-report datafile="${cobertura.filename}" format="html" destdir="${output-dir.coverage-report}"
            srcdir="${src.directory}" />
    </target>

    <target name="coverage" depends="compile-for-coverage,run-tests,coverage-report"/>

</project>
